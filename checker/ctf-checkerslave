#!/usr/bin/python3

import logging
import argparse
import importlib
import sys
import socket
import requests

from requests.adapters import TimeoutSauce
class MyTimeout(TimeoutSauce):
    def __init__(self, *args, **kwargs):
        connect = kwargs.get('connect', 10.0)
        if connect is None:
            connect = 10.0
        read = kwargs.get('read', connect)
        if read is None:
            read = 10.0
        total = kwargs.get('total', connect)
        if total is None:
            total = 10.0
        super(MyTimeout, self).__init__(connect=connect, read=read, total=total)


def run(args):
    socket.setdefaulttimeout(10.0)
    requests.adapters.TimeoutSauce = MyTimeout

    logging.debug("Importing checker")
    checkermod, checkerclass = args.checker.split(":")
    checkermod = importlib.import_module(checkermod)
    checkerclass = getattr(checkermod, checkerclass)

    logging.debug("Initializing checker")
    checker = checkerclass(args.tick, args.team, args.service, args.ip)
    result = checker.run()

    if 0 == result:
        print("OK")
    elif 1 == result:
        print("TIMEOUT")
    elif 2 == result:
        print("NOTWORKING")
    elif 3 == result:
        print("NOTFOUND")
    elif 4 == result:
        print("RECOVERING")
    sys.stdout.flush()


def main():
    logging.basicConfig()
    parser = argparse.ArgumentParser(description="CTF checker runner")
    parser.add_argument('checker', type=str,
                        help="module:classname of checker")
    parser.add_argument('--service', type=int, required=True)
    parser.add_argument('--ip', type=str, required=True)
    parser.add_argument('--tick', type=int, required=True)
    parser.add_argument('--team', type=int, required=True)
    parser.add_argument('-v', '--loglevel', default='WARNING', type=str,
                        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                        help='Loglevel')

    args = parser.parse_args()

    numeric_level = getattr(logging, args.loglevel.upper())
    logging.getLogger().setLevel(numeric_level)

    try:
        from systemd.journal import JournalHandler
        identifier = "team%03d-tick%03d" % (args.team, args.tick)
        logging.root.addHandler(JournalHandler(SYSLOG_IDENTIFIER=identifier,
                                               CTF_TEAM_ID=args.team,
                                               CTF_TICK=args.tick))
    except ImportError:
        logging.warn("Missing systemd module")

    run(args)

if __name__ == '__main__':
    main()
