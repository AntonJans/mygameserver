#!/usr/bin/python3

import asyncore
import asynchat
import socket
import sys
import argparse
import logging

import flag

class FlagHandler(asynchat.async_chat):
    def handle_flag(self):
        if self.buffer == b'':
            self.push(b"418 I'm a teapot!\n")
            return

        try:
            curflag = self.buffer.decode('us-ascii')
        except UnicodeDecodeError as e:
            self.push(u"Flags should be of the Format [-_a-zA-Z0-9]+".encode('utf-8'))
            return

        try:
            team, service, _, timestamp = flag.verify(curflag)
        except flag.InvalidFlagFormat:
            self.push(b"Flag not recognized\n")
            return
        except flag.InvalidFlagMAC:
            self.push(b"Not a valid Flag\n")
            return
        except flag.FlagExpired as e:
            self.push((u"Flag expired since %.1f seconds\n" % e.args).encode('utf-8'))
            return

        if team == self.team:
            self.push(b"Can't submit a flag for your own team\n")
            return

        self.push(u"Thank you for your submission!\n".encode('utf-8'))


    def __init__(self, sock, addr):
        asynchat.async_chat.__init__(self, sock=sock)
        self.team = -1
        self.addr = addr
        self.set_terminator(b"\n")
        self.logger = logging.getLogger(str(addr[0]))
        self.buffer = b''
        self.push(u"FAUSTCTF Flagserver\n".encode('utf-8'))
        self.push(u"One flag per line please!\n".encode('utf-8'))

    def collect_incoming_data(self, data):
        self.buffer = self.buffer + data

    def found_terminator(self):
        self.logger.debug(repr(self.buffer))
        self.handle_flag()
        self.buffer = b''

class FlagServer(asyncore.dispatcher):
    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(family=socket.AF_INET6)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)
        self.logger = logging.getLogger("server")

    def handle_accepted(self, sock, addr):
        self.logger.info('Incoming connection from %s', repr(addr))
        handler = FlagHandler(sock, addr)

def main():
    logging.basicConfig(format='%(asctime)s %(levelname)s(%(name)s): %(message)s',
                        datefmt='%m/%d/%Y %H:%M:%S')

    parser = argparse.ArgumentParser(description="Flag submission system")
    parser.add_argument('-v', '--loglevel', default='WARNING', type=str,
                        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                        help='Loglevel')
    parser.add_argument('-l', '--listen', type=str, default="localhost",
                        help='address or hostname to listen on')
    parser.add_argument('-p', '--port', type=int, default="6666",
                        help="Port to listen on")
    args = parser.parse_args()

    numeric_level = getattr(logging, args.loglevel.upper())
    logging.getLogger().setLevel(numeric_level)

    logging.debug("Starting asyncore")
    server = FlagServer(args.listen, args.port)
    asyncore.loop()
    try:
        import systemd
        systemd.daemon.notify("READY=1")
    except ImportError:
        pass

if __name__ == '__main__':
    main()
