#!/usr/bin/env python3

import argparse
import datetime
import logging

import psycopg2

from ctf_gameserver.lib.args import get_arg_parser_with_db


UPDATE_BONUS_QUERY="""
UPDATE scoring_flag as outerflag
SET bonus = 1 / (
  SELECT greatest(1, count(*))
  FROM scoring_flag
  LEFT OUTER JOIN scoring_capture ON scoring_capture.flag_id = scoring_flag.id
  WHERE scoring_capture.flag_id = outerflag.id)
FROM scoring_gamecontrol
WHERE outerflag.tick + scoring_gamecontrol.valid_ticks < scoring_gamecontrol.current_tick
  AND outerflag.bonus IS NULL;
"""


def update_database(db):
    with db:
        with db.cursor() as cursor:
            cursor.execute(UPDATE_BONUS_QUERY)
            cursor.execute('REFRESH MATERIALIZED VIEW "scoring_scoreboard"')


def main():
    logging.basicConfig()

    parser = get_arg_parser_with_db('CTF Gameserver scoring tool')
    args = parser.parse_args()

    numeric_level = getattr(logging, args.loglevel.upper())
    logging.getLogger().setLevel(numeric_level)

    db = psycopg2.connect(host=args.dbhost,
                          database=args.dbname,
                          user=args.dbuser,
                          password=args.dbpassword)

    with db:
        with db.cursor() as cursor:
            cursor.execute('SELECT start, "end" FROM scoring_gamecontrol')
            start, end = cursor.fetchone()

    now = datetime.datetime.now(tz=datetime.timezone.utc)
    if start is None or now < start:
        logging.info("Contest not running yet")
        return
    elif now > end:
        logging.info("contest already over")
        return
    else:
        update_database(db)

if __name__ == '__main__':
    main()
