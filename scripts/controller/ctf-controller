#!/usr/bin/env python3

import argparse
import datetime
import logging

import psycopg2

from ctf_gameserver.lib.helper import convert_arg_line_to_args


def update_database(db):
    with db:
        with db.cursor() as cursor:
            cursor.execute("UPDATE scoring_gamecontrol SET current_tick = current_tick + 1")
            cursor.execute("""INSERT INTO scoring_flag
                                 (service_id, protecting_team_id, tick)
                              SELECT svc.id, user_id, current_tick
                              FROM scoring_service svc, registration_team, scoring_gamecontrol""")


def main():
    logging.basicConfig()
    parser = argparse.ArgumentParser(description="CTF checker runner",
                                     fromfile_prefix_chars='@')
    parser.convert_arg_line_to_args = convert_arg_line_to_args

    parser.add_argument('-v', '--loglevel', default='WARNING', type=str,
                        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                        help='Loglevel')
    parser.add_argument('--dbname', type=str, required=True,
                        help='Name of the used database')
    parser.add_argument('--dbuser', type=str, required=True,
                        help='username for database access')
    parser.add_argument('--dbpassword', type=str,
                        help='password for database access if needed')
    parser.add_argument('--dbhost', type=str,
                        help='hostname of the database. If unspecified '
                             'ctf-submission will connect via default UNIX socket')

    args = parser.parse_args()

    numeric_level = getattr(logging, args.loglevel.upper())
    logging.getLogger().setLevel(numeric_level)

    db = psycopg2.connect(host=args.dbhost,
                          database=args.dbname,
                          user=args.dbuser,
                          password=args.dbpassword)

    with db:
        with db.cursor() as cursor:
            cursor.execute('SELECT start, "end" FROM scoring_gamecontrol')
            start, end = cursor.fetchone()

    now = datetime.datetime.now(tz=datetime.timezone.utc)
    if start is None or now < start:
        logging.info("Contest not running yet")
        return
    elif now > end:
        logging.info("contest already over")
        return
    else:
        update_database(db)


if __name__ == '__main__':
    main()
